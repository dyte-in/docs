openapi: 3.0.0
info:
  version: 2.0.0
  title: dyte-rest-api
servers:
  - url: "https://api.cluster.dyte.in/v2/"
    description: Production server
components:
  securitySchemes:
    organizationAuth:
      type: http
      scheme: basic
      description: Use OrgID as username, followed by its APIKEY as password 
    userAuth:
      type: http
      scheme: bearer
      description: Uses the bearer token a user will get when they login into their account on Dyte
  schemas:
    WebhookSuccessResponse:
      type: object
      properties:
        success:
          type: boolean
        data:
          type: object
          properties:
            id:
              type: string
              format: uuid
            name:
              type: string
            url:
              type: string
              format: uri
            events:
              type: array
              items:
                type: string
                enum:
                  - meeting.started
                  - meeting.ended
                  - meeting.participantJoined
                  - meeting.participantLeft
                  - meeting.statusUpdate
            created_at:
              type: string
              format: date-time
            updated_at:
              type: string
              format: date-time
    WebhooksListSuccessResponse:
      type: object
      properties:
        success:
          type: boolean
        data:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                format: uuid
              name:
                type: string
              url:
                type: string
                format: uri
              events:
                type: array
                items:
                  type: string
                  enum:
                    - meeting.started
                    - meeting.ended
                    - meeting.participantJoined
                    - meeting.participantLeft
                    - meeting.statusUpdate
              created_at:
                type: string
                format: date-time
              updated_at:
                type: string
                format: date-time
    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
        error:
          type: object
          properties:
            code:
              type: number
            message:
              type: string
    WebhookRequest:
      type: object
      required:
        - name
        - url
        - events
      properties:
        name:
          type: string
        url:
          type: string
          format: uri
        events:
          type: array
          items:
            type: string
            enum:
              - meeting.started
              - meeting.ended
              - meeting.participantJoined
              - meeting.participantLeft
              - meeting.statusUpdate
    PatchWebhookRequest:
      type: object
      properties:
        name:
          type: string
        url:
          type: string
          format: uri
        events:
          type: array
          items:
            type: string
            enum:
              - meeting.started
              - meeting.ended
              - meeting.participantJoined
              - meeting.participantLeft
              - meeting.statusUpdate
    OrganizationRequest:
      type: object
      required:
        - name
        - contact
        - website
      properties:
        name:
          type: string
        contact:
          type: string
        website:
          type: string
          format: uri
        feature_flags:
          type: array
          items:
            type: string
        preferred_region:
          type: string
          enum:
            - ap-south-1
            - ap-southeast-1
            - us-west-1
          default: ap-south-1
    PatchOrganizationRequest:
      type: object
      required:
        - name
        - contact
        - website
      properties:
        name:
          description: Must be a unique organization name
          type: string
        contact:
          type: string
        website:
          type: string
          format: uri
        feature_flags:
          type: array
          items:
            type: string
        preferred_region:
          type: string
          enum:
            - ap-south-1
            - ap-southeast-1
            - us-west-1
          default: ap-south-1
    OrganizationData:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        contact:
          type: string
        website:
          type: string
          format: uri
        apikey:
          type: string
        preferred_region:
          type: string
        feature_flags:
          type: array
          items:
            type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - id
        - name
        - contact
        - website
        - preferred_region
        - feature_flags
        - created_at
        - updated_at
        - apikey
    OrganizationSuccessResponse:
      type: object
      required:
      - success
      - data
      properties:
        success:
          type: boolean
        data:
          allOf:
            - $ref: '#/components/schemas/OrganizationData'
    OrganizationListSuccessResponse:
      type: object
      required:
      - success
      - data
      - paging
      properties:
        success:
          type: boolean
        data:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/OrganizationData'
        paging:
          type: object
          properties:
            total_count:
              type: number
            start_offset:
              type: number
            end_offset:
              type: number
          required:
            - total_count
            - start_offset
            - end_offset
    ActiveSession:
      type: object
      properties:
        id:
          type: string
          description: roomUUID of session
        associated_id:
          type: string
          description: id of associated object. if session type is meeting, it is
            mapped to meetingId, livestreamId if session type is livestream
        type:
          type: string
          description: type of session
          enum:
          - meeting
          - livestream
          - participant
        status:
          type: string
          description: current status of session
          enum:
          - LIVE
          - ENDED
        live_participants:
          type: number
          description: number of participants currently in the session
        max_concurrent_participants:
          type: number
          description: number of maximum participants that were in the session
        minutes_consumed:
          type: number
          description: number of minutes consumed since the session started
        started_at:
          type: string
          description: timestamp when session started
        ended_at:
          type: string
          description: timestamp when session ended
        created_at:
          type: string
          description: timestamp when session created
        updated_at:
          type: string
          description: timestamp when session was last updated
    GenericErrorResponse:
      type: object
      properties:
        success:
          type: boolean
        error:
          type: object
          properties:
            code:
              type: number
            message:
              type: string
    Participant:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string
        picture:
          type: string
        verified:
          type: boolean
        anonymous:
          type: boolean
        allow_mails:
          type: boolean
        created_at:
          type: string
        updated_at:
          type: string
    Poll:
      type: object
      properties:
        id:
          type: string
        question:
          type: string
        options:
          type: array
          items:
            type: object
            properties:
              text:
                type: string
              count:
                type: number
              votes:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    name:
                      type: string
        anonymous:
          type: boolean
        hide_votes:
          type: boolean
        created_by:
          type: string
        voted:
          type: array
          items:
            type: string
  parameters:
    Content-Type:
      name: Content-Type
      in: header
      required: true
      style: simple
      schema:
        type: string
        example: application/json
    streamId:
      name: streamId
      in: path
      required: true
      style: simple
      schema:
        type: number
    meetingId:
      name: meetingId
      in: path
      required: true
      schema:
        type: string
  requestBodies:
    KickParticipantsBody:
      description: Request body for kicking participants from active session. Only
        one of `participant_id` or `custom_participant_id` is required
      content:
        application/json:
          schema:
            type: object
            properties:
              participant_ids:
                type: array
                items:
                  type: string
              custom_participant_ids:
                type: array
                items:
                  type: string
    MuteAllParticipantsBody:
      description: Request body for muting all participants in an active session.
      content:
        application/json:
          schema:
            type: object
            properties:
              allow_unmute:
                type: boolean
                description: if false, participants won't be able to unmute themselves
                  after they are muted
    CreatePollBody:
      description: Request body for creating a new poll
      content:
        application/json:
          schema:
            type: object
            properties:
              question:
                type: string
                description: Question of the poll
              options:
                type: array
                description: Different options for the question
                items:
                  type: string
              anonymous:
                type: boolean
                description: if voters on a poll are anonymous
              hide_votes:
                type: boolean
                description: if votes on an option are visible before a person votes
  responses:
    GetActiveSession:
      description: Active Session Success response
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                "$ref": "#/components/schemas/ActiveSession"
          examples:
            activeSessionSuccess:
              "$ref": "#/components/examples/GetActiveSessionSuccessResponse"
    GetActiveSessionNotFound:
      description: Active Session is not found for the given meetingId
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/GenericErrorResponse"
          examples:
            activeSessionNotFound:
              "$ref": "#/components/examples/GetActiveSessionNotFoundResponse"
    KickParticipants:
      description: Kick participants success response
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                type: object
                properties:
                  action:
                    type: string
                  participants:
                    type: array
                    items:
                      "$ref": "#/components/schemas/Participant"
    ParticipantNotFound:
      description: No participant found for given `participant_id` or `custom_participant_id`
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/GenericErrorResponse"
          examples:
            participantNotFound:
              "$ref": "#/components/examples/ParticipantNotFoundResponse"
    KickAllParticipants:
      description: Kick all participants from a meeeting
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                type: object
                properties:
                  action:
                    type: string
                  kicked_participants_count:
                    type: number
    MuteParticipants:
      description: Mute one or more participants of a meeting
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                type: object
                properties:
                  action:
                    type: string
                  participants:
                    type: array
                    items:
                      "$ref": "#/components/schemas/Participant"
    MuteAllParticipants:
      description: Mute all participants of a meeting
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                type: object
                properties:
                  action:
                    type: string
                  muted_participants_count:
                    type: number
    CreatePoll:
      description: response for creating a poll
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
              data:
                type: object
                properties:
                  action:
                    type: string
                  poll:
                    "$ref": "#/components/schemas/Poll"
  examples:
    GetActiveSessionSuccessResponse:
      summary: Success response for fetching active session
      value:
        success: true
        data:
          id: 813432c7-3c5a-45e2-9acf-eef7061c7584
          associated_id: 6bf2b8be-04dd-4191-b602-1128921a306b
          type: meeting
          status: LIVE
          live_participants: 1
          max_concurrent_participants: 2
          minutes_consumed: 2.3434
          started_at: '2022-01-12T14:21:34.388Z'
          ended_at: 'null'
          created_at: '2022-01-12T14:21:34.398Z'
          updated_at: '2022-01-12T14:26:00.784Z'
    GetActiveSessionNotFoundResponse:
      summary: Active Session not found
      value:
        success: false
        error:
          code: 404
          message: No active session found for meeting_id 6bf2b8be-04dd-4191-b602-1128921a306b
    ParticipantNotFoundResponse:
      summary: Participant Not Found
      value:
        success: false
        error:
          code: 404
          message: No user found with id 813432c7-3c5a-45e2-9acf-eef7061c7584
security:
  - organizationAuth: []
paths:
  "/webhooks":
    summary: Represents webhooks for organization
    description: Represents webhooks for organization
    get:
      summary: Get all webhooks
      tags:
        - Webhooks
      description: >
        Gets details of all webhooks that have been registered for the organization
      operationId: getAllWebhooks
      responses:
        "200":
          description: Operation successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebhooksListSuccessResponse"
              example: |
                {
                  success: true,
                  data: [
                    {
                      id: '901e9adf-ebd9-41f0-9098-28171bc04ddd',
                      name: 'test',
                      events: [ 'meeting.started' ],
                      url: 'https://testURL.com',
                      created_at: '2021-09-09T10:25:12.330Z',
                      updated_at: '2021-09-09T10:25:12.330Z'
                    }
                  ]
                }
        "401":
          description: Invalid credentials
          content:
            application/json:
              example: |
                {
                  message: "Unauthorized"
                }
    post:
      summary: Add a new webhook
      tags:
        - Webhooks
      description: >
        Add a new webhook to organization
      operationId: addWebhook
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebhookRequest"
            example: |
              {
                name: 'test',
                events: [ 'meeting.started' ],
                url: 'https://testURL.com'
              }
      responses:
        "201":
          description: Webhook registered successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebhookSuccessResponse"
              example: |
                {
                  success: true,
                  data: {
                    id: '901e9adf-ebd9-41f0-9098-28171bc04ddd',
                    name: 'test',
                    events: [ 'meeting.started' ],
                    url: 'https://testURL.com',
                    created_at: '2021-09-09T10:25:12.330Z',
                    updated_at: '2021-09-09T10:25:12.330Z'
                  }
                }
        "400":
          description: Error- malformed request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example: |
                {
                  success: false,
                  error: { code: 400, message: 'BAD_REQUEST: "name" is required' }
                }
        "401":
          description: Invalid credentials
          content:
            application/json:
              example: |
                {
                  message: "Unauthorized"
                }
  "/webhooks/{id}":
    summary: Represents a single webhook
    description: Represents a single webhook for an organization by ID
    get:
      summary: Get details of a webhook
      description: >
        Get details of a single webhook by its ID
      tags:
        - Webhooks
      operationId: getWebhook
      parameters:
        - name: id
          in: path
          description: ID of webhook
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Operation successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebhookSuccessResponse"
              example: |
                {
                  success: true,
                  data: {
                    id: '901e9adf-ebd9-41f0-9098-28171bc04ddd',
                    name: 'test',
                    events: [ 'meeting.started' ],
                    url: 'https://testURL.com',
                    created_at: '2021-09-09T10:25:12.330Z',
                    updated_at: '2021-09-09T10:25:12.330Z'
                  }
                }
        "400":
          description: Error- malformed request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example: |
                {
                  success: false,
                  error: { code: 400, message: 'BAD_REQUEST: "id" must be a valid GUID' }
                }
        "401":
          description: Invalid credentials
          content:
            application/json:
              example: |
                {
                  message: "Unauthorized"
                }
    put:
      summary: Replace a webhook
      description: Replace all details of a single webhook
      tags:
        - Webhooks
      operationId: replaceWebhook
      parameters:
        - name: id
          in: path
          description: ID of webhook
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebhookRequest"
            example: |
              {
                name: 'test',
                events: [ 'meeting.started' ],
                url: 'https://testURL.com'
              }
      responses:
        "200":
          description: Operation successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebhookSuccessResponse"
              example: |
                {
                  success: true,
                  data: {
                    id: '901e9adf-ebd9-41f0-9098-28171bc04ddd',
                    name: 'test',
                    events: [ 'meeting.started' ],
                    url: 'https://testURL.com',
                    created_at: '2021-09-09T10:25:12.330Z',
                    updated_at: '2021-09-09T10:25:12.376Z'
                  }
                }
        "400":
          description: Error- malformed request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example: |
                {
                  success: false,
                  error: { code: 400, message: 'BAD_REQUEST: "id" must be a valid GUID' }
                }
        "401":
          description: Invalid credentials
          content:
            application/json:
              example: |
                {
                  message: "Unauthorized"
                }
    patch:
      summary: Edit a webhook
      description: Partially edit details of a single webhook
      tags:
        - Webhooks
      operationId: editWebhook
      parameters:
        - name: id
          in: path
          description: ID of webhook
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchWebhookRequest"
            example: |
              {
                name: 'test2',
                events: [ 'meeting.ended' ],
                url: 'https://testURL2.com'
              }
      responses:
        "200":
          description: Operation successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebhookSuccessResponse"
              example: |
                {
                  success: true,
                  data: {
                    id: '901e9adf-ebd9-41f0-9098-28171bc04ddd',
                    name: 'test2',
                    events: [ 'meeting.ended' ],
                    url: 'https://testURL2.com',
                    created_at: '2021-09-09T10:25:12.330Z',
                    updated_at: '2021-09-09T10:25:12.367Z'
                  }
                }
        "400":
          description: Error- malformed request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example: |
                {
                  success: false,
                  error: { code: 400, message: 'BAD_REQUEST: "id" must be a valid GUID' }
                }
        "401":
          description: Invalid credentials
          content:
            application/json:
              example: |
                {
                  message: "Unauthorized"
                }
    delete:
      summary: Delete a webhook
      description: Remove a single webhook by ID
      tags:
        - Webhooks
      operationId: deleteWebhook
      parameters:
        - name: id
          in: path
          description: ID of webhook
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Operation successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebhookSuccessResponse"
              example: |
                {
                  success: true,
                  data: {
                    id: '901e9adf-ebd9-41f0-9098-28171bc04ddd',
                    name: 'test2',
                    events: [ 'meeting.ended' ],
                    url: 'https://testURL2.com',
                    created_at: '2021-09-09T10:25:12.330Z',
                    updated_at: '2021-09-09T10:25:12.367Z'
                  }
                }
        "400":
          description: Error- malformed request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example: |
                {
                  success: false,
                  error: { code: 400, message: 'BAD_REQUEST: "id" must be a valid GUID' }
                }
        "401":
          description: Invalid credentials
          content:
            application/json:
              example: |
                {
                  message: "Unauthorized"
                }
  "/orgs":
    get:
      summary: Gets all the user's organizations.
      description: Gets all the user's organizations. This endpoint is paginated.
      tags:
        - Organizations
      operationId: getAllOrgs
      security:
        - userAuth: []
      parameters:
        - in: query
          name: per_page
          schema:
            type: integer
            minimum: 1
          description: Number of values to return in a single page. Default value is 25.
        - in: query
          name: page_no
          schema:
            type: integer
            minimum: 1
          description: The page number to return. Default value is 1.
      responses:
        "200":
          description: Operation successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrganizationListSuccessResponse"
        "400":
          description: Malformed request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    post:
      summary: Create a new organization
      description: Create a new organization. The authenticated user becomes the owner of this organization.
      tags:
        - Organizations
      operationId: createOrg
      security:
        - userAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrganizationRequest"
      responses:
        "201":
          description: Operation successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrganizationSuccessResponse"
        "400":
          description: Malformed request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: Organization with the provided name already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  "/orgs/{id}":
    get:
      summary: Get details of a single organization.
      description: Fetches details of a single organization by ID. User must be an owner of this organization.
      tags:
        - Organizations
      operationId: getOrg
      security:
        - userAuth: []
      responses:
        "200":
          description: Operation successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrganizationSuccessResponse"
        "400":
          description: Malformed request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: User is not authorized to perform this operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    patch:
      summary: Edit details of an organization. 
      description: Fetches details of a single organization. User must be an owner of this org.
      tags:
        - Organizations
      operationId: editOrg
      security:
        - userAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchOrganizationRequest"
      responses:
        "200":
          description: Operation successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrganizationSuccessResponse"
        "400":
          description: Malformed request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  "/livestreams":
    post:
      summary: Create a LiveStream
      description: 'Create a live stream

        '
      operationId: StartaLiveStream
      parameters:
      - "$ref": "#/components/parameters/Content-Type"
      responses:
        '200':
          description: ''
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                example-1:
                  value: {}
      requestBody:
        description: 'Create a live stream

          '
        required: true
        content:
          application/json:
            schema:
              type: string
              example: testing
            example: |-
              {
                  "name": "testing"
              }
      tags:
      - LiveStreams
    get:
      summary: Get all LiveStreams
      description: 'Get all live streams created by an organization

        '
      operationId: GetallLiveStreams
      parameters: []
      responses:
        '200':
          description: ''
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                example-1:
                  value:
                    success: true
                    message: ''
                    data:
                      limit: 10
                      total: 1
                      totalCount: 1
                      pageCount: 1
                      currentPage: 1
                      livestreams:
                      - id: '850340555635017830461318'
                        title: testing
                        input_rtmp_url: rtmp://livestreaming.dyte.io/LiveApp/850340555635017830461318?token=502603528024515256366542
                        token_id: '502603528024515256366542'
                        stream_key: 850340555635017830461318?token=502603528024515256366542
                        player_url: https://livestreaming.dyte.io:5443/LiveApp/play.html?name=850340555635017830461318
                        status: OFFLINE
                        hls_play_url: https://livestreaming.dyte.io:5443/LiveApp/streams/850340555635017830461318.m3u8
      tags:
      - LiveStreams
  "/livestreams/{streamId}":
    get:
      summary: Get a LiveStream
      description: 'Get details of a particular live stream created by an organization

        '
      operationId: GetaLiveStream
      parameters:
      - "$ref": "#/components/parameters/streamId"
      responses:
        '200':
          description: ''
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                example-1:
                  value:
                    success: true
                    data:
                      id: '850340555635017830461318'
                      title: testing
                      input_rtmp_url: rtmp://livestreaming.dyte.io/LiveApp/850340555635017830461318?token=502603528024515256366542
                      token_id: '502603528024515256366542'
                      stream_key: 850340555635017830461318?token=502603528024515256366542
                      player_url: https://livestreaming.dyte.io:5443/LiveApp/play.html?name=850340555635017830461318
                      status: OFFLINE
                      hls_play_url: https://livestreaming.dyte.io:5443/LiveApp/streams/850340555635017830461318.m3u8
      tags:
      - LiveStreams
  "/meetings/{meetingId}/active-session":
    get:
      summary: Get an active session
      description: Get an ongoing active session of a meeting
      operationId: GetActiveSession
      parameters:
      - "$ref": "#/components/parameters/meetingId"
      tags:
      - ActiveSession
      responses:
        '200':
          "$ref": "#/components/responses/GetActiveSession"
        '404':
          "$ref": "#/components/responses/GetActiveSessionNotFound"
  "/meetings/{meetingId}/active-session/kick":
    post:
      summary: Kick participants from active session
      description: Kick one or more participants using userId or customParticipantId
        from an active session
      operationId: KickPartcipants
      parameters:
      - "$ref": "#/components/parameters/meetingId"
      tags:
      - ActiveSession
      requestBody:
        "$ref": "#/components/requestBodies/KickParticipantsBody"
      responses:
        '200':
          "$ref": "#/components/responses/KickParticipants"
        '404':
          "$ref": "#/components/responses/ParticipantNotFound"
  "/meetings/{meetingId}/active-session/kick-all":
    post:
      summary: Kick all participant
      description: Kick all participants from an active session
      operationId: KickAllParticipants
      parameters:
      - "$ref": "#/components/parameters/meetingId"
      tags:
      - ActiveSession
      responses:
        '200':
          "$ref": "#/components/responses/KickAllParticipants"
  "/meetings/{meetingId}/active-session/mute":
    post:
      summary: Mute participants of an active session
      description: Mute one or more participants from an active session using userId
        or customParticipantId
      operationId: MuteParticipants
      parameters:
      - "$ref": "#/components/parameters/meetingId"
      tags:
      - ActiveSession
      requestBody:
        "$ref": "#/components/requestBodies/KickParticipantsBody"
      responses:
        '200':
          "$ref": "#/components/responses/MuteParticipants"
  "/meetings/{meetingId}/active-session/mute-all":
    post:
      summary: Mute all participants
      description: Mute all participants of an active session
      operationId: MuteAllParticipants
      parameters:
      - "$ref": "#/components/parameters/meetingId"
      tags:
      - ActiveSession
      requestBody:
        "$ref": "#/components/requestBodies/MuteAllParticipantsBody"
      responses:
        '200':
          "$ref": "#/components/responses/MuteAllParticipants"
  "/meetings/{meetingId}/active-session/poll":
    post:
      summary: Create a poll
      description: Create a new poll in an active session
      operationId: CreatePoll
      parameters:
      - "$ref": "#/components/parameters/meetingId"
      tags:
      - ActiveSession
      requestBody:
        "$ref": "#/components/requestBodies/CreatePollBody"
      responses:
        '201':
          "$ref": "#/components/responses/CreatePoll"         
